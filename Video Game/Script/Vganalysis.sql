/* Dataset from https://www.kaggle.com/datasets/gregorut/videogamesales/data */
/*
This dataset contains a list of video games with sales greater than 100,000 copies. It was generated by a scrape of vgchartz.com.

Fields include

Rank - Ranking of overall sales

Name - The games name

Platform - Platform of the games release (i.e. PC,PS4, etc.)

Year - Year of the game's release

Genre - Genre of the game

Publisher - Publisher of the game

NA_Sales - Sales in North America (in millions)

EU_Sales - Sales in Europe (in millions)

JP_Sales - Sales in Japan (in millions)

Other_Sales - Sales in the rest of the world (in millions)

Global_Sales - Total worldwide sales.
*/


-- Checking datatype
DESCRIBE vgsales;

-- 
SELECT *
FROM vgsales;

-- Checking for Null Value
SELECT
	CASE WHEN ranking IS NULL THEN 1 ELSE 0 END AS 'Ranking',
    CASE WHEN vgname IS NULL THEN 1 ELSE 0 END AS 'VgName',
    CASE WHEN platform IS NULL THEN 1 ELSE 0 END AS 'Platform',
    CASE WHEN year_release IS NULL THEN 1 ELSE 0 END AS 'Release_year',
    CASE WHEN Genre IS NULL THEN 1 ELSE 0 END AS 'Genre',
    CASE WHEN Publisher IS NULL THEN 1 ELSE 0 END AS 'Publisher',
    CASE WHEN NA_Sales IS NULL THEN 1 ELSE 0 END AS 'NA_Sales',
    CASE WHEN EU_Sales IS NULL THEN 1 ELSE 0 END AS 'EU_Sales',
    CASE WHEN Jp_Sales IS NULL THEN 1 ELSE 0 END AS 'Jp_Sales',
    CASE WHEN Other_Sales IS NULL THEN 1 ELSE 0 END AS 'Other_Sales',
    CASE WHEN Global_Sales IS NULL THEN 1 ELSE 0 END AS 'Global_Sales'
FROM vgsales;


--
-- Checking for Duplicate values
SELECT *
FROM vgsales vg1
WHERE EXISTS(
			SELECT 1
            FROM vgsales vg2
            WHERE vg1.ranking <> vg2.ranking
            AND vg1.vgname = vg2.vgname
            AND vg1.platform = vg2.platform
            AND vg1.year_release = vg2.year_release
            AND vg1.Genre = vg2.Genre
            AND vg1.Publisher = vg2.Publisher
            AND vg1.NA_Sales = vg2.NA_Sales
            AND vg1.EU_Sales = vg2.EU_Sales
            AND vg1.JP_Sales = vg2.JP_Sales
            AND vg1.Other_Sales = vg2.Other_Sales
            AND vg1.Global_Sales = vg2.Global_Sales
			);
            
--
SELECT 
    (SELECT COUNT(*) FROM vgsales) AS num_rows,
    (SELECT COUNT(column_name) FROM information_schema.columns WHERE table_name = 'vgsales') AS num_columns;


-- -------------------------------------------------------------- Data Exploration ------------------------------------------------------------ --
-- Average Global_sales accross all video games
SELECT  ROUND(AVG(Global_Sales),3) as AVG_Global_Sales
FROM vgsales;

-- Check which platform has the highest average global_sales
SELECT
    year_release,
    platform,
    ROUND(AVG(Global_sales),2) AS total_sales
FROM vgsales
GROUP BY year_release, platform
ORDER BY year_release ASC;

-- Publisher with the most number of video games
SELECT Publisher, COUNT(vgname) as Count
from vgsales
GROUP BY Publisher  
ORDER BY Count DESC;

-- Publishers rank based on Global_sales
SELECT publisher, ROUND(SUM(Global_sales),2) as Total_sales
FROM vgsales
GROUP BY Publisher
ORDER BY Total_sales DESC;

-- Check the total sales in each country
SELECT year_release,
	CASE WHEN ROUND(SUM(NA_Sales),2) IS NOT NULL THEN ROUND(SUM(NA_Sales),2) ELSE NULL END AS total_NA_sales,
    CASE WHEN ROUND(SUM(EU_Sales),2) IS NOT NULL THEN ROUND(SUM(EU_Sales),2) ELSE NULL END AS total_EU_sales,
    CASE WHEN ROUND(SUM(JP_Sales),2) IS NOT NULL THEN ROUND(SUM(JP_Sales),2) ELSE NULL END AS total_JP_sales,
    CASE WHEN ROUND(SUM(Other_Sales),2) IS NOT NULL THEN ROUND(SUM(Other_Sales),2) ELSE NULL END AS total_sales_on_other_country,
    CASE WHEN ROUND(SUM(GLobal_Sales),2) IS NOT NULL THEN ROUND(SUM(Global_Sales),2) ELSE NULL END AS total_sales_Globally
FROM vgsales
GROUP BY year_release
ORDER BY year_release ASC;

-- Check the correlation on each country amd global sales
SELECT 
    ROUND((SUM(Global_Sales * NA_Sales) - SUM(Global_Sales) * SUM(NA_Sales) / COUNT(*)) / 
    (SQRT((SUM(Global_Sales * Global_Sales) - POW(SUM(Global_Sales), 2) / COUNT(*)) * 
	(SUM(NA_Sales * NA_Sales) - POW(SUM(NA_Sales), 2) / COUNT(*)))),3) AS corr_coefficient_for_NA,
    
    ROUND((SUM(Global_Sales * EU_Sales) - SUM(Global_Sales) * SUM(EU_Sales) / COUNT(*)) / 
	(SQRT((SUM(Global_Sales * Global_Sales) - POW(SUM(Global_Sales), 2) / COUNT(*)) * 
	(SUM(EU_Sales * EU_Sales) - POW(SUM(EU_Sales), 2) / COUNT(*)))),3) AS corr_coefficient_for_EU,
    
    ROUND((SUM(Global_Sales * JP_Sales) - SUM(Global_Sales) * SUM(JP_Sales) / COUNT(*)) / 
    (SQRT((SUM(Global_Sales * Global_Sales) - POW(SUM(Global_Sales), 2) / COUNT(*)) * 
	(SUM(JP_Sales * JP_Sales) - POW(SUM(JP_Sales), 2) / COUNT(*)))),3) AS corr_coefficient_for_JP,
    
    ROUND((SUM(Global_Sales * Other_Sales) - SUM(Global_Sales) * SUM(Other_Sales) / COUNT(*)) / 
    (SQRT((SUM(Global_Sales * Global_Sales) - POW(SUM(Global_Sales), 2) / COUNT(*)) * 
	(SUM(Other_Sales * Other_Sales) - POW(SUM(Other_Sales), 2) / COUNT(*)))),3) AS corr_coefficient_for_other_country
FROM vgsales;

-- Check the correlation coefficient of NA to other country
-- NA and EU
SELECT
	ROUND((SUM(NA_Sales * EU_Sales) - SUM(NA_Sales) * SUM(EU_Sales) / COUNT(*)) /
    (SQRT((SUM(NA_Sales * Na_Sales) - POW(SUM(NA_Sales),2) / COUNT(*)) *
	(SUM(EU_Sales * EU_Sales) - POW(SUM(EU_Sales),2) / COUNT(*)))),3) as Corr_Coef_between_NA_and_EU,
-- NA and JP    
    ROUND((SUM(NA_Sales * JP_Sales) - SUM(NA_Sales) * SUM(JP_Sales) / COUNT(*)) /
    (SQRT((SUM(NA_Sales * Na_Sales) - POW(SUM(NA_Sales),2) / COUNT(*)) *
	(SUM(JP_Sales * JP_Sales) - POW(SUM(JP_Sales),2) / COUNT(*)))),3) as Corr_Coef_between_NA_and_JP,
-- NA and Rest of the world
	ROUND((SUM(NA_Sales * Other_Sales) - SUM(NA_Sales) * SUM(Other_Sales) / COUNT(*)) /
    (SQRT((SUM(NA_Sales * Na_Sales) - POW(SUM(NA_Sales),2) / COUNT(*)) *
	(SUM(Other_Sales * Other_Sales) - POW(SUM(Other_Sales),2) / COUNT(*)))),3) as Corr_Coef_between_NA_and_Other_country
     from vgsales;
     
-- Most played genre of all time
SELECT genre, COUNT(*) as most_played_genre
from vgsales
GROUP BY genre
ORDER BY most_played_genre DESC
LIMIT 1;

-- Distribution of Genre
SELECT Genre, COUNT(*) as Count
FROM vgsales
GROUP BY Genre
ORDER BY Count DESC;

-- Distribution of Platform
SELECT platform, COUNT(*) as Count
FROM vgsales
GROUP BY platform
ORDER BY Count DESC;









